{"version":3,"file":"index.mjs","sources":["../lib/weibull.js","../lib/factory.js","../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Weibull distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*/\nfunction weibull( rand, k, lambda ) {\n\treturn lambda * pow( -ln( 1.0-rand() ), 1.0/k );\n}\n\n\n// EXPORTS //\n\nexport default weibull;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport noop from '@stdlib/utils-noop';\nimport { factory as randu } from '@stdlib/random-base-mt19937';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport typedarray2json from '@stdlib/array-to-json';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\nimport weibull0 from './weibull.js';\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Weibull distributed random numbers.\n*\n* @param {PositiveNumber} [k] - shape parameter\n* @param {PositiveNumber} [lambda] - scale parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `k` must be a positive number\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var weibull = factory( 2.0, 1.0 );\n*\n* var v = weibull();\n* // returns <number>\n*\n* @example\n* var weibull = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = weibull();\n* // returns <number>\n*/\nfunction factory() {\n\tvar lambda;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar k;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0pD2V', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( '0pD6u', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tk = arguments[ 0 ];\n\t\tlambda = arguments[ 1 ];\n\t\terr = validate( lambda, k );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( '0pD2V', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0pD6u', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( lambda === void 0 ) {\n\t\tprng = weibull2;\n\t} else {\n\t\tprng = weibull1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'weibull' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( k === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ k, lambda ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Weibull distribution.\n\t*\n\t* @private\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = weibull1();\n\t* // returns <number>\n\t*/\n\tfunction weibull1() {\n\t\treturn weibull0( rand, k, lambda );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Weibull distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} k - scale parameter\n\t* @param {PositiveNumber} lambda - shape parameter\n\t* @returns {NonNegativeNumber} pseudorandom number\n\t*\n\t* @example\n\t* var v = weibull2( 2.0, 1.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = weibull2( 3.0, 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = weibull2( 0.0, 2.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = weibull2( NaN, NaN );\n\t* // returns NaN\n\t*/\n\tfunction weibull2( k, lambda ) {\n\t\tif (\n\t\t\tisnan( k ) ||\n\t\t\tisnan( lambda ) ||\n\t\t\tk <= 0.0 ||\n\t\t\tlambda <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn weibull0( rand, k, lambda );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( k, lambda ) {\n\tif ( !isPositive( k ) ) {\n\t\treturn new TypeError( format( '0pD7c', k ) );\n\t}\n\tif ( !isPositive( lambda ) ) {\n\t\treturn new TypeError( format( '0pD7d', lambda ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Weibull distribution.\n*\n* @name weibull\n* @type {PRNG}\n* @param {PositiveNumber} k - shape parameter\n* @param {PositiveNumber} lambda - scale parameter\n* @returns {NonNegativeNumber} pseudorandom number\n*\n* @example\n* var v = weibull( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var v = weibull( -2.0, 3.0 );\n* // returns NaN\n*/\nvar weibull = factory();\n\n\n// EXPORTS //\n\nexport default weibull;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Weibull distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-weibull\n*\n* @example\n* import weibull from '@stdlib/random-base-weibull';\n*\n* var v = weibull( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-weibull';\n* var weibull = factory( 2.0, 3.0, {\n*     'seed': 297\n* });\n*\n* var v = weibull();\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-weibull';\n* var weibull = factory({\n*     'seed': 297\n* });\n*\n* var v = weibull( 2.0, 3.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["weibull","rand","k","lambda","pow","ln","factory","opts","prng","err","arguments","length","randu","isObject","TypeError","format","hasOwnProp","isFunction","isPositive","validate","setReadOnly","isnan","NaN","weibull0","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","seed","seedLength","state","s","stateLength","byteLength","out","name","NAME","typedarray2json","params","normalized","main"],"mappings":";;s/CAqCA,SAASA,EAASC,EAAMC,EAAGC,GAC1B,OAAOA,EAASC,GAAMC,EAAI,EAAIJ,KAAU,EAAIC,EAC7C,CC+BA,SAASI,IACR,IAAIH,EACAI,EACAN,EACAO,EACAC,EACAP,EAEJ,GAA0B,IAArBQ,UAAUC,OACdV,EAAOW,SACD,GAA0B,IAArBF,UAAUC,OAAe,CAEpC,IAAME,EADNN,EAAOG,UAAW,IAEjB,MAAM,IAAII,UAAWC,EAAQ,QAASR,IAEvC,GAAKS,EAAYT,EAAM,QAAW,CACjC,IAAMU,EAAYV,EAAKC,MACtB,MAAM,IAAIM,UAAWC,EAAQ,QAAS,OAAQR,EAAKC,OAEpDP,EAAOM,EAAKC,IACf,MACGP,EAAOW,EAAOL,EAEjB,KAAQ,CAIN,GADAE,ECtDF,SAAmBP,EAAGC,GACrB,OAAMe,EAAYhB,GAGZgB,EAAYf,GAGX,KAFC,IAAIW,UAAWC,EAAQ,QAASZ,IAHhC,IAAIW,UAAWC,EAAQ,QAASb,GAMzC,CD8CQiB,CADNhB,EAASO,UAAW,GADpBR,EAAIQ,UAAW,IAId,MAAMD,EAEP,GAAKC,UAAUC,OAAS,EAAI,CAE3B,IAAME,EADNN,EAAOG,UAAW,IAEjB,MAAM,IAAII,UAAWC,EAAQ,QAASR,IAEvC,GAAKS,EAAYT,EAAM,QAAW,CACjC,IAAMU,EAAYV,EAAKC,MACtB,MAAM,IAAIM,UAAWC,EAAQ,QAAS,OAAQR,EAAKC,OAEpDP,EAAOM,EAAKC,IAChB,MACIP,EAAOW,EAAOL,EAElB,MACGN,EAAOW,GAER,CA2BD,OArBAQ,EAJCZ,OADe,IAAXL,EAsJL,SAAmBD,EAAGC,GACrB,GACCkB,EAAOnB,IACPmB,EAAOlB,IACPD,GAAK,GACLC,GAAU,EAEV,OAAOmB,IAER,OAAOC,EAAUtB,EAAMC,EAAGC,EAC1B,EAtCD,WACC,OAAOoB,EAAUtB,EAAMC,EAAGC,EAC1B,EAvHkB,OAAQ,WAGtBI,GAAQA,EAAKC,MACjBY,EAAaZ,EAAM,OAAQ,MAC3BY,EAAaZ,EAAM,aAAc,MACjCgB,EAAsBhB,EAAM,QAASiB,EAAkB,MAAQC,GAC/DN,EAAaZ,EAAM,cAAe,MAClCY,EAAaZ,EAAM,aAAc,MACjCY,EAAaZ,EAAM,SAAUiB,EAAkB,OAC/CL,EAAaZ,EAAM,OAAQP,KAE3B0B,EAAqBnB,EAAM,QAiB5B,WACC,OAAOP,EAAK2B,IACZ,IAlBAD,EAAqBnB,EAAM,cA0B5B,WACC,OAAOP,EAAK4B,UACZ,IA3BAL,EAAsBhB,EAAM,SAuD7B,WACC,OAAOP,EAAK6B,KACZ,IASD,SAAmBC,GAClB9B,EAAK6B,MAAQC,CACb,IAnEAJ,EAAqBnB,EAAM,eAkC5B,WACC,OAAOP,EAAK+B,WACZ,IAnCAL,EAAqBnB,EAAM,cA2C5B,WACC,OAAOP,EAAKgC,UACZ,IA5CAb,EAAaZ,EAAM,UA6EpB,WACC,IAAI0B,EAAM,CACVA,KAAW,QACXA,EAAIC,KAAO3B,EAAK4B,KAChBF,EAAIJ,MAAQO,EAAiBpC,EAAK6B,OAEjCI,EAAII,YADM,IAANpC,EACS,GAEA,CAAEA,EAAGC,GAEnB,OAAO+B,CACP,IAvFAd,EAAaZ,EAAM,OAAQP,GAC3BA,EAAOA,EAAKsC,YAEN/B,CAuIR,CE1OG,IAACR,EAAUM,ICedc,EAAAoB,EAAA,UAAAlC"}